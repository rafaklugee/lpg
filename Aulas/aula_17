//VETORES DE PONTEIROS E PONTEIROS PARA PONTEIROS
//Um ponteiro pode ser utilizado para alocar um vetor dinamicamente
//Um vetor de ponteiros pode ser utilizado para alocar uma matriz dinamicamente
//Somente o número de colunas e dinâmico (o número de linhas é a capacidade do vetor)
//int argc : quantidade de palavras digitadas
//char *argv[] : vetor de strings (contém as palavras)

//Ponteiros para ponteiros : Aponta para outro ponteiro, ou seja, temos mais um nível de endereçamento
//Sintaxe : **

/*
#include <stdio.h>
int main (int argc, char *argv[]) {
    int i;
    for (i = 0; i < argc; i++)
    printf ("%d : %s\n", i, argv[i]);

    return 0;
}
*/

#include <stdio.h>
#include <stdlib.h>

float pot (float b, int e) {

    if (e == 0)
        return 1;

    if (e < 0)
        return pot (1/ b, -e);

    return b * pot (b, e - 1);
}
int main (int argc, char *argv[]) {

    if (argc < 3) {
        printf ("Erro! Entada insuficiente!\nFormato: Potencia <base> <expo>");
        return 1;
    }
    float base;
    int expo;
    /*
    scanf ("%f", &base);
    scanf ("%d", &expo);
    */
    int x;
    x = sscanf (argv[1], "%f", &base);

    if (x == 0) {
        printf ("Erro: base deve ser um valor real!\n");
        return 1;
    }

    x = sscanf (argv[2], "%d", &expo);
    if (x == 0) {
        printf ("Erro: expo deve ser um valor inteiro!\n");
        return 1;
    }

    sscanf (argv[1], "%f", &base);
    sscanf (argv[2], "%d", &expo);
    printf ("%.3f elevado a %d: %.3f\n", base, expo, pot(base,expo));
    
    return 0;
}
